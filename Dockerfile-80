# react-dockerizing/Dockerfile

# base image 설정(as builder 로 완료된 파일을 밑에서 사용할 수 있다.)
FROM node:18-alpine as builder

# ENV NODE_ENV=production

# 컨테이너 내부 작업 디렉토리 설정
# RUN mkdir /app
WORKDIR /app

ENV PATH /app/node_modules/.bin:$PATH

COPY package*.json ./

# package.json 및 package-lock.json 파일에 명시된 의존성 패키지들을 설치
RUN npm install --silent

# 호스트 머신의 현재 디렉토리 파일들을 컨테이너 내부로 전부 복사
# COPY . .    
COPY . /app


############################
RUN npm run build





############################
FROM nginx:stable-alpine
# nginx의 기본 설정을 삭제하고 앱에서 설정한 파일을 복사
RUN rm -rf /etc/nginx/conf.d
COPY conf /etc/nginx

# 위에서 생성한 앱의 빌드산출물을 nginx의 샘플 앱이 사용하던 폴더로 이동
COPY --from=builder /app/build /usr/share/nginx/html

# 80포트 오픈하고 nginx 실행
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

 

############################

# 그리고 Dockerfile로 docker 이미지를 빌드해야한다.
# $ docker build -f Dockerfile-80 -t react-1:80 .


############################
# docker run -it -p 80:80 react-1:80